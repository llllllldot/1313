// –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä –∏ —Ç–µ—Å—Ç–æ–≤
const gameData = {
    'cyber-security': {
        title: '–ö–∏–±–µ—Ä-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        description: '–ù–∞—É—á–∏–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ',
        games: [
            {
                title: '–°–æ–±–µ—Ä–∏ —Å—É–ø–µ—Ä-–ø–∞—Ä–æ–ª—å',
                description: '–°–æ–∑–¥–∞–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤',
                type: 'password'
            },
            {
                title: '–°–≤–æ–π ‚Äî –ß—É–∂–æ–π –≤ —Å–µ—Ç–∏',
                description: '–ù–∞—É—á–∏—Å—å –æ—Ç–ª–∏—á–∞—Ç—å –¥—Ä—É–∑–µ–π –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤',
                type: 'friend-or-foe'
            }
        ],
        test: {
            question: '–ú–æ–∂–Ω–æ —Å–æ–æ–±—â–∞—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –æ—Ç –∏–≥—Ä—ã –ª—É—á—à–µ–º—É –¥—Ä—É–≥—É?',
            options: [
                { text: '–î–∞, –æ–Ω –∂–µ –ª—É—á—à–∏–π –¥—Ä—É–≥', correct: false },
                { text: '–ù–µ—Ç, –ø–∞—Ä–æ–ª—å –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–µ', correct: true }
            ]
        }
    },
    'saving': {
        title: '–ö–∞–∫ –Ω–∞–∫–æ–ø–∏—Ç—å',
        description: '–£—á–∏–º—Å—è —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –∫–æ–ø–∏—Ç—å –Ω–∞ –≤–∞–∂–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏',
        games: [
            {
                title: '–ö–æ–ø–∏–ª–∫–∞-–º–µ—á—Ç–∞',
                description: '–ù–∞–∫–æ–ø–∏ –º–æ–Ω–µ—Ç–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä—É—à–∫–∏',
                type: 'piggy-bank'
            },
            {
                title: '–í—ã–±–æ—Ä: —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ—Ç–æ–º?',
                description: '–£—á–∏—Å—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–∞ –≤–∞–∂–Ω—ã–µ —Ü–µ–ª–∏',
                type: 'choice'
            }
        ],
        test: {
            question: '–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é –∫—É–∫–ª—É?',
            options: [
                { text: '–ü–æ–∫—É–ø–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–æ–Ω—Ñ–µ—Ç—É', correct: false },
                { text: '–û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –≤ –∫–æ–ø–∏–ª–∫—É', correct: true }
            ]
        }
    },
    'fraud-protection': {
        title: '–ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤',
        description: '–£–∑–Ω–∞–µ–º, –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±–º–∞–Ω –∏ –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è',
        games: [
            {
                title: '–ù–∏—á–µ–≥–æ –Ω–µ –±–µ—Ä–∏ —É –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞',
                description: '–ù–∞—É—á–∏—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å "–Ω–µ—Ç" –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º –ª—é–¥—è–º',
                type: 'stranger-danger'
            },
            {
                title: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
                description: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∑–≤–æ–Ω–∏—Ç –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü',
                type: 'phone-call'
            }
        ],
        test: {
            question: '–ë–∞–±—É–ª–µ—á–∫–∞ –≤ –ø–∞—Ä–∫–µ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–∞ –∫–æ—à–µ–ª–µ–∫ –∏ –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å –µ–µ –¥–æ–º–æ–π. –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?',
            options: [
                { text: '–°–∞–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å', correct: false },
                { text: '–ü–æ–∑–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –∏–ª–∏ –ø–æ–ª–∏—Ü–µ–π—Å–∫–æ–≥–æ', correct: true }
            ]
        }
    },
    'budget-planning': {
        title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
        description: '–£—á–∏–º—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –¥–µ–Ω—å–≥–∏',
        games: [
            {
                title: '–ù—É–∂–Ω–æ vs –•–æ—á–µ—Ç—Å—è',
                description: '–£—á–∏—Å—å –æ—Ç–ª–∏—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç –∂–µ–ª–∞–µ–º—ã—Ö',
                type: 'needs-wants'
            },
            {
                title: '–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é',
                description: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–∞–∂–Ω—ã–µ –Ω—É–∂–¥—ã',
                type: 'budget'
            }
        ],
        test: {
            question: '–ú–∞–º–∞ –¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é. –ß—Ç–æ –∫—É–ø–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?',
            options: [
                { text: '–•–ª–µ–± –∏ –º–æ–ª–æ–∫–æ', correct: true },
                { text: '–ù–æ–≤—É—é –º–∞—à–∏–Ω–∫—É', correct: false }
            ]
        }
    },
    'game-safety': {
        title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–∞—Ö',
        description: '–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞—Ö',
        games: [
            {
                title: '–°–æ–∑–¥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
                description: '–ü—Ä–∏–¥—É–º–∞–π –Ω–∏–∫–Ω–µ–π–º –∏ –∞–≤–∞—Ç–∞—Ä –±–µ–∑ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                type: 'safe-character'
            },
            {
                title: '–û–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
                description: '–ö–∞–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                type: 'chat-safety'
            }
        ],
        test: {
            question: '–ú–æ–∂–Ω–æ –≤ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?',
            options: [
                { text: '–ú–æ–∂–Ω–æ', correct: false },
                { text: '–ù–µ–ª—å–∑—è', correct: true }
            ]
        }
    },
    'finance-basics': {
        title: '–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤',
        description: '–£–∑–Ω–∞–µ–º, —á—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–Ω—å–≥–∏ –∏ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç',
        games: [
            {
                title: '–£–≥–∞–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—é',
                description: '–£–∑–Ω–∞–π, –∫–∞–∫ –ª—é–¥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–µ–Ω—å–≥–∏',
                type: 'professions'
            },
            {
                title: '–ú–∞–≥–∞–∑–∏–Ω',
                description: '–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–¥–∞—á—É',
                type: 'shop'
            }
        ],
        test: {
            question: '–ö–∞–∫ –º–∞–º–∞ –∏ –ø–∞–ø–∞ –ø–æ–ª—É—á–∞—é—Ç –¥–µ–Ω—å–≥–∏?',
            options: [
                { text: '–•–æ–¥—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É', correct: true },
                { text: '–ù–∞—Ö–æ–¥—è—Ç –Ω–∞ –¥–µ—Ä–µ–≤–µ', correct: false }
            ]
        }
    }
};

// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let currentGameState = {
    topic: null,
    gameIndex: null,
    gameType: null,
    score: 0,
    attempts: 0
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openGameModal(topic) {
    const modal = document.getElementById('gameModal');
    const content = document.getElementById('modalContent');
    const topicData = gameData[topic];
    
    if (!topicData) return;
    
    currentGameState.topic = topic;
    
    content.innerHTML = `
        <div class="game-content">
            <h2>${topicData.title}</h2>
            <p class="game-description">${topicData.description}</p>
            
            <div class="game-options">
                ${topicData.games.map((game, index) => `
                    <div class="game-option" onclick="startGame('${topic}', ${index})">
                        <h4>${game.title}</h4>
                        <p>${game.description}</p>
                    </div>
                `).join('')}
            </div>
            
            <div class="advice-box">
                <h4>üí° –°–æ–≤–µ—Ç –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π</h4>
                <p>–ò–≥—Ä–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º, –æ–±—Å—É–∂–¥–∞–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∑–Ω–∞–Ω–∏—è –≤ –∂–∏–∑–Ω–∏. –ü–æ—Å–ª–µ –∏–≥—Ä—ã —Å–ø—Ä–æ—Å–∏—Ç–µ: "–ê –∫–∞–∫ –±—ã —Ç—ã –ø–æ—Å—Ç—É–ø–∏–ª –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?"</p>
            </div>
        </div>
    `;
    
    modal.style.display = 'block';
}

function startGame(topic, gameIndex) {
    currentGameState.topic = topic;
    currentGameState.gameIndex = gameIndex;
    currentGameState.gameType = gameData[topic].games[gameIndex].type;
    currentGameState.score = 0;
    currentGameState.attempts = 0;
    
    renderGame();
}

function renderGame() {
    const modal = document.getElementById('gameModal');
    const content = document.getElementById('modalContent');
    const topicData = gameData[currentGameState.topic];
    const game = topicData.games[currentGameState.gameIndex];
    
    let gameHTML = '';
    
    switch (currentGameState.gameType) {
        case 'password':
            gameHTML = renderPasswordGame();
            break;
        case 'friend-or-foe':
            gameHTML = renderFriendOrFoeGame();
            break;
        case 'piggy-bank':
            gameHTML = renderPiggyBankGame();
            break;
        case 'choice':
            gameHTML = renderChoiceGame();
            break;
        case 'stranger-danger':
            gameHTML = renderStrangerDangerGame();
            break;
        case 'phone-call':
            gameHTML = renderPhoneCallGame();
            break;
        case 'needs-wants':
            gameHTML = renderNeedsWantsGame();
            break;
        case 'budget':
            gameHTML = renderBudgetGame();
            break;
        case 'safe-character':
            gameHTML = renderSafeCharacterGame();
            break;
        case 'chat-safety':
            gameHTML = renderChatSafetyGame();
            break;
        case 'professions':
            gameHTML = renderProfessionsGame();
            break;
        case 'shop':
            gameHTML = renderShopGame();
            break;
    }
    
    content.innerHTML = `
        <div class="game-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h2>${game.title}</h2>
                <div style="display: flex; gap: 1rem; align-items: center;">
                    <span style="background: #8b5cf6; color: white; padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.875rem;">
                        –û—á–∫–∏: ${currentGameState.score}
                    </span>
                    <button onclick="openGameModal('${currentGameState.topic}')" style="background: #6b7280; color: white; border: none; padding: 0.5rem 1rem; border-radius: 8px; cursor: pointer;">
                        –ù–∞–∑–∞–¥
                    </button>
                </div>
            </div>
            <p class="game-description">${game.description}</p>
            
            ${gameHTML}
        </div>
    `;
}

// –ò–≥—Ä–∞ 1: –°–æ–±–µ—Ä–∏ —Å—É–ø–µ—Ä-–ø–∞—Ä–æ–ª—å
function renderPasswordGame() {
    const symbols = ['A', 'B', 'C', '1', '2', '3', '!', '@', '#'];
    const shuffled = [...symbols].sort(() => Math.random() - 0.5);
    const targetPassword = shuffled.slice(0, 6).join('');
    
    return `
        <div style="text-align: center;">
            <div style="background: #f8fafc; border: 2px dashed #d1d5db; border-radius: 12px; padding: 2rem; margin: 2rem 0;">
                <h3 style="color: #1f2937; margin-bottom: 1rem;">–°–æ–±–µ—Ä–∏ –ø–∞—Ä–æ–ª—å –∏–∑ 6 —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤</h3>
                <div style="font-size: 2rem; letter-spacing: 0.5rem; margin: 1rem 0; padding: 1rem; background: white; border-radius: 8px;">
                    ${targetPassword.split('').map(() => '‚óè').join(' ')}
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.5rem; max-width: 300px; margin: 0 auto;">
                ${shuffled.map((symbol, index) => `
                    <button onclick="handlePasswordSymbol('${symbol}', ${index})" 
                            style="font-size: 1.5rem; padding: 1rem; border: 2px solid #e5e7eb; background: white; border-radius: 8px; cursor: pointer;">
                        ${symbol}
                    </button>
                `).join('')}
            </div>
            
            <div style="margin-top: 2rem;">
                <button onclick="completePasswordGame()" 
                        style="background: #10b981; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer; font-size: 1.125rem;">
                    –Ø —Å–æ–±—Ä–∞–ª –ø–∞—Ä–æ–ª—å!
                </button>
            </div>
        </div>
    `;
}

function handlePasswordSymbol(symbol, index) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
    const button = document.querySelector(`button[onclick="handlePasswordSymbol('${symbol}', ${index})"]`);
    button.style.transform = 'scale(0.95)';
    setTimeout(() => button.style.transform = 'scale(1)', 150);
}

function completePasswordGame() {
    currentGameState.score += 10;
    showGameResult('üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–æ–∑–¥–∞–ª –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å!', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.');
}

// –ò–≥—Ä–∞ 2: –°–≤–æ–π ‚Äî –ß—É–∂–æ–π –≤ —Å–µ—Ç–∏
function renderFriendOrFoeGame() {
    const scenarios = [
        { type: 'friend', avatar: 'üòä', message: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ–∂–µ –ª—é–±–ª—é —ç—Ç—É –∏–≥—Ä—É! –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å?', name: '–í–µ—Å–µ–ª—ã–π –ú–∏—à–∫–∞' },
        { type: 'foe', avatar: 'üë§', message: '–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è –º–∞–º–∞ –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫. –ù–∞–∑–æ–≤–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å.', name: '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü' },
        { type: 'friend', avatar: 'üê∞', message: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂!', name: '–ó–∞–π—á–∏–∫' },
        { type: 'foe', avatar: 'üé≠', message: '–Ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∏–≥—Ä—ã. –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç, –µ—Å–ª–∏ –Ω–µ —Å–∫–∞–∂–µ—à—å –ø–∞—Ä–æ–ª—å.', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' }
    ];
    
    const currentScenario = scenarios[Math.floor(Math.random() * scenarios.length)];
    
    return `
        <div style="text-align: center;">
            <div style="background: white; border: 2px solid #e5e7eb; border-radius: 16px; padding: 2rem; margin: 2rem 0; max-width: 400px; margin-left: auto; margin-right: auto;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">${currentScenario.avatar}</div>
                <h3 style="color: #1f2937; margin-bottom: 0.5rem;">${currentScenario.name}</h3>
                <p style="color: #6b7280; font-style: italic; margin-bottom: 2rem;">"${currentScenario.message}"</p>
                
                <div style="display: flex; gap: 1rem; justify-content: center;">
                    <button onclick="handleFriendFoeChoice('${currentScenario.type}', 'friend')" 
                            style="background: #10b981; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer; font-size: 1rem;">
                        üëç –î—Ä—É–≥
                    </button>
                    <button onclick="handleFriendFoeChoice('${currentScenario.type}', 'foe')" 
                            style="background: #ef4444; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer; font-size: 1rem;">
                        üëé –ß—É–∂–æ–π
                    </button>
                </div>
            </div>
        </div>
    `;
}

function handleFriendFoeChoice(correctType, userChoice) {
    if (correctType === userChoice) {
        currentGameState.score += 5;
        showGameResult('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!', userChoice === 'friend' ? '–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è!' : '–≠—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü - –Ω–µ –æ–±—â–∞–π—Å—è —Å –Ω–∏–º!');
    } else {
        showGameResult('‚ùå –û—Å—Ç–æ—Ä–æ–∂–Ω–æ!', userChoice === 'friend' ? '–≠—Ç–æ –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü - –Ω–µ –¥–æ–≤–µ—Ä—è–π –µ–º—É!' : '–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è!');
    }
}

// –ò–≥—Ä–∞ 3: –ö–æ–ø–∏–ª–∫–∞-–º–µ—á—Ç–∞
function renderPiggyBankGame() {
    const goal = '–ù–æ–≤–∞—è –∫—É–∫–ª–∞';
    const goalPrice = 5;
    const currentSavings = Math.min(currentGameState.score, goalPrice);
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 1rem;">–¶–µ–ª—å: ${goal} (${goalPrice} –º–æ–Ω–µ—Ç)</h3>
            
            <div style="position: relative; margin: 2rem auto; width: 200px;">
                <!-- –ö–æ–ø–∏–ª–∫–∞ -->
                <div style="background: #fbbf24; width: 150px; height: 180px; border-radius: 75px 75px 20px 20px; margin: 0 auto; position: relative; border: 4px solid #d97706;">
                    <div style="background: #d97706; width: 30px; height: 10px; border-radius: 15px; position: absolute; top: -10px; left: 60px;"></div>
                    <!-- –ú–æ–Ω–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ -->
                    ${Array.from({length: currentSavings}, (_, i) => `
                        <div style="position: absolute; background: #fbbf24; border: 2px solid #d97706; border-radius: 50%; width: 30px; height: 30px; 
                                    bottom: ${20 + i * 15}px; left: ${60 + Math.sin(i) * 10}px;"></div>
                    `).join('')}
                </div>
            </div>
            
            <div style="margin: 1rem 0;">
                <div style="background: #e5e7eb; height: 20px; border-radius: 10px; margin: 1rem auto; max-width: 300px;">
                    <div style="background: #10b981; height: 100%; border-radius: 10px; width: ${(currentSavings / goalPrice) * 100}%; transition: width 0.5s;"></div>
                </div>
                <p>–ù–∞–∫–æ–ø–ª–µ–Ω–æ: ${currentSavings} –∏–∑ ${goalPrice} –º–æ–Ω–µ—Ç</p>
            </div>
            
            <button onclick="addCoinToPiggyBank()" 
                    style="background: #f59e0b; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer; font-size: 1.125rem; margin: 1rem;">
                üí∞ –ü–æ–ª–æ–∂–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
            </button>
            
            ${currentSavings >= goalPrice ? `
                <button onclick="completePiggyBankGame()" 
                        style="background: #10b981; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer; font-size: 1.125rem;">
                    üéÅ –ö—É–ø–∏—Ç—å ${goal}!
                </button>
            ` : ''}
        </div>
    `;
}

function addCoinToPiggyBank() {
    currentGameState.score += 1;
    renderGame();
}

function completePiggyBankGame() {
    showGameResult('üéâ –£—Ä–∞! –¢—ã –Ω–∞–∫–æ–ø–∏–ª –Ω–∞ –∫—É–∫–ª—É!', '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.');
}

// –ò–≥—Ä–∞ 4: –í—ã–±–æ—Ä: —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ—Ç–æ–º?
function renderChoiceGame() {
    const choices = [
        { now: 'üç´ –®–æ–∫–æ–ª–∞–¥–∫–∞ (1 –º–æ–Ω–µ—Ç–∞)', later: 'üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ (5 –º–æ–Ω–µ—Ç)', correct: 'later' },
        { now: 'üç≠ –õ–µ–¥–µ–Ω–µ—Ü (1 –º–æ–Ω–µ—Ç–∞)', later: 'üß∏ –ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞ (3 –º–æ–Ω–µ—Ç—ã)', correct: 'later' },
        { now: 'üéà –í–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä–∏–∫ (1 –º–æ–Ω–µ—Ç–∞)', later: 'üìö –ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–∏–≥–∞ (4 –º–æ–Ω–µ—Ç—ã)', correct: 'later' }
    ];
    
    const currentChoice = choices[Math.floor(Math.random() * choices.length)];
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 2rem;">–ß—Ç–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å?</h3>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; max-width: 500px; margin: 0 auto;">
                <div style="background: #fef3c7; border: 3px solid #f59e0b; border-radius: 16px; padding: 2rem; cursor: pointer;" 
                     onclick="handleChoice('now', '${currentChoice.correct}')">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">${currentChoice.now.split(' ')[0]}</div>
                    <h4>–°–ï–ô–ß–ê–°</h4>
                    <p style="color: #92400e;">${currentChoice.now}</p>
                </div>
                
                <div style="background: #d1fae5; border: 3px solid #10b981; border-radius: 16px; padding: 2rem; cursor: pointer;" 
                     onclick="handleChoice('later', '${currentChoice.correct}')">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">${currentChoice.later.split(' ')[0]}</div>
                    <h4>–ü–û–¢–û–ú</h4>
                    <p style="color: #065f46;">${currentChoice.later}</p>
                </div>
            </div>
            
            <p style="color: #6b7280; margin-top: 2rem;">–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å!</p>
        </div>
    `;
}

function handleChoice(userChoice, correctChoice) {
    if (userChoice === correctChoice) {
        currentGameState.score += 8;
        showGameResult('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!', '–¢–µ—Ä–ø–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è! –°–∫–æ—Ä–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –≤–µ—â—å.');
    } else {
        showGameResult('ü§î –ü–æ–¥—É–º–∞–π –µ—â–µ...', '–ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –º–µ—à–∞—é—Ç –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —á—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ–µ.');
    }
}

// –ò–≥—Ä–∞ 5: –ù–∏—á–µ–≥–æ –Ω–µ –±–µ—Ä–∏ —É –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞
function renderStrangerDangerGame() {
    const items = ['üç¨ –ö–æ–Ω—Ñ–µ—Ç–∞', 'üéÅ –ü–æ–¥–∞—Ä–æ–∫', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω', 'üß∏ –ò–≥—Ä—É—à–∫–∞'];
    const dangerousItems = items.slice(0, 2); // –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–ø–∞—Å–Ω—ã
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 1rem;">–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ:</h3>
            <p style="color: #6b7280; margin-bottom: 2rem;">–ù–∞–∂–∏–º–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–±–µ–≥—É –∫ –º–∞–º–µ!"</p>
            
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; max-width: 400px; margin: 0 auto 2rem;">
                ${items.map(item => `
                    <button onclick="handleStrangerItem('${item}')" 
                            style="background: #ef4444; color: white; border: none; padding: 1.5rem; border-radius: 12px; cursor: pointer; font-size: 1.125rem;">
                        ${item}
                    </button>
                `).join('')}
            </div>
            
            <button onclick="handleStrangerEscape()" 
                    style="background: #10b981; color: white; border: none; padding: 1.5rem 2rem; border-radius: 12px; cursor: pointer; font-size: 1.125rem;">
                üèÉ‚Äç‚ôÇÔ∏è –£–±–µ–≥—É –∫ –º–∞–º–µ!
            </button>
        </div>
    `;
}

function handleStrangerItem(item) {
    showGameResult('‚ùå –û–ø–∞—Å–Ω–æ!', `–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±–µ—Ä–∏ ${item.toLowerCase()} —É –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞!`);
}

function handleStrangerEscape() {
    currentGameState.score += 10;
    showGameResult('‚úÖ –ú–æ–ª–æ–¥–µ—Ü!', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—Å–µ–≥–¥–∞ —É–±–µ–≥–∞–π –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º, –µ—Å–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç.');
}

// –ò–≥—Ä–∞ 6: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫
function renderPhoneCallGame() {
    return `
        <div style="text-align: center;">
            <div style="background: #1f2937; color: white; border-radius: 20px; padding: 2rem; margin: 2rem auto; max-width: 400px;">
                <div style="font-size: 2rem; margin-bottom: 1rem;">üìû</div>
                <h3 style="margin-bottom: 1rem;">–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫</h3>
                <p style="opacity: 0.8; margin-bottom: 2rem;">–ù–µ–∑–Ω–∞–∫–æ–º—ã–π –Ω–æ–º–µ—Ä</p>
                
                <div style="background: #374151; padding: 1.5rem; border-radius: 12px; margin-bottom: 2rem;">
                    <p style="font-style: italic;">"–ê–ª–ª–æ! –≠—Ç–æ –ø–∞–ø–∏–Ω –¥—Ä—É–≥. –ü–∞–ø–∞ –ø–æ–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ–±—ã —Ç—ã –Ω–∞–∑–≤–∞–ª –Ω–æ–º–µ—Ä –µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã."</p>
                </div>
                
                <div style="display: flex; flex-direction: column; gap: 1rem;">
                    <button onclick="handlePhoneResponse('wrong')" 
                            style="background: #ef4444; color: white; border: none; padding: 1rem; border-radius: 8px; cursor: pointer;">
                        "–í–æ—Ç –Ω–æ–º–µ—Ä: 1234 5678 9012 3456"
                    </button>
                    <button onclick="handlePhoneResponse('correct')" 
                            style="background: #10b981; color: white; border: none; padding: 1rem; border-radius: 8px; cursor: pointer;">
                        "–Ø —Å–µ–π—á–∞—Å —Å–ø—Ä–æ—à—É —É —Ä–æ–¥–∏—Ç–µ–ª–µ–π"
                    </button>
                </div>
            </div>
        </div>
    `;
}

function handlePhoneResponse(choice) {
    if (choice === 'correct') {
        currentGameState.score += 10;
        showGameResult('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–í—Å–µ–≥–¥–∞ –∑–æ–≤–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü –ø—Ä–æ—Å–∏—Ç –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!');
    } else {
        showGameResult('‚ùå –û–ø–∞—Å–Ω–æ!', '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–æ–±—â–∞–π –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç –∏ –¥—Ä—É–≥—É—é –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º!');
    }
}

// –ò–≥—Ä–∞ 7: –ù—É–∂–Ω–æ vs –•–æ—á–µ—Ç—Å—è
function renderNeedsWantsGame() {
    const items = [
        { name: 'üçû –•–ª–µ–±', type: 'need' },
        { name: 'ü•õ –ú–æ–ª–æ–∫–æ', type: 'need' },
        { name: 'üöó –ú–∞—à–∏–Ω–∫–∞', type: 'want' },
        { name: 'üéÆ –ò–≥—Ä–∞', type: 'want' },
        { name: 'üëï –§—É—Ç–±–æ–ª–∫–∞', type: 'need' },
        { name: 'üç¨ –ö–æ–Ω—Ñ–µ—Ç—ã', type: 'want' }
    ].sort(() => Math.random() - 0.5);
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 2rem;">–†–∞–∑–ª–æ–∂–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ –∫–æ—Ä–∑–∏–Ω–∞–º</h3>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                <div style="background: #d1fae5; border: 3px solid #10b981; border-radius: 16px; padding: 1.5rem; min-height: 200px;">
                    <h4>‚úÖ –ù–£–ñ–ù–û</h4>
                    <p style="color: #065f46;">–î–ª—è –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è</p>
                    <div id="needs-basket" style="min-height: 100px; margin-top: 1rem;"></div>
                </div>
                
                <div style="background: #fef3c7; border: 3px solid #f59e0b; border-radius: 16px; padding: 1.5rem; min-height: 200px;">
                    <h4>üéÅ –•–û–ß–ï–¢–°–Ø</h4>
                    <p style="color: #92400e;">–î–ª—è —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π</p>
                    <div id="wants-basket" style="min-height: 100px; margin-top: 1rem;"></div>
                </div>
            </div>
            
            <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; justify-content: center; margin-bottom: 2rem;">
                ${items.map(item => `
                    <button onclick="sortItem('${item.name}', '${item.type}')" 
                            style="background: white; border: 2px solid #e5e7eb; padding: 1rem; border-radius: 8px; cursor: pointer;">
                        ${item.name}
                    </button>
                `).join('')}
            </div>
            
            <button onclick="checkNeedsWantsSorting()" 
                    style="background: #8b5cf6; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer;">
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
            </button>
        </div>
    `;
}

let sortedItems = { needs: [], wants: [] };

function sortItem(itemName, correctType) {
    const item = itemName.split(' ')[1] ? itemName.split(' ')[1] : itemName;
    
    if (correctType === 'need') {
        sortedItems.needs.push(item);
        document.getElementById('needs-basket').innerHTML += `<div style="background: #a7f3d0; padding: 0.5rem; margin: 0.25rem; border-radius: 6px;">${itemName}</div>`;
    } else {
        sortedItems.wants.push(item);
        document.getElementById('wants-basket').innerHTML += `<div style="background: #fde68a; padding: 0.5rem; margin: 0.25rem; border-radius: 6px;">${itemName}</div>`;
    }
}

function checkNeedsWantsSorting() {
    const needsCount = sortedItems.needs.length;
    const wantsCount = sortedItems.wants.length;
    
    if (needsCount >= 2 && wantsCount >= 2) {
        currentGameState.score += 12;
        showGameResult('üéâ –û—Ç–ª–∏—á–Ω–æ!', '–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∏ –∂–µ–ª–∞–µ–º—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!');
    } else {
        showGameResult('ü§î –ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å!', '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. "–ù—É–∂–Ω–æ" - —ç—Ç–æ —Ç–æ, –±–µ–∑ —á–µ–≥–æ –Ω–µ–ª—å–∑—è –æ–±–æ–π—Ç–∏—Å—å, "–•–æ—á–µ—Ç—Å—è" - —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å.');
    }
    sortedItems = { needs: [], wants: [] };
}

// –ò–≥—Ä–∞ 8: –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é
function renderBudgetGame() {
    const totalMoney = 10;
    const categories = [
        { name: 'üçé –ï–¥–∞', recommended: 5, spent: 0 },
        { name: 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', recommended: 2, spent: 0 },
        { name: 'üéÅ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', recommended: 3, spent: 0 }
    ];
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 1rem;">–£ —Ç–µ–±—è –µ—Å—Ç—å ${totalMoney} –º–æ–Ω–µ—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é</h3>
            <p style="color: #6b7280; margin-bottom: 2rem;">–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –¥–µ–Ω—å–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</p>
            
            <div style="display: grid; gap: 1rem; max-width: 400px; margin: 0 auto 2rem;">
                ${categories.map((category, index) => `
                    <div style="background: white; border: 2px solid #e5e7eb; border-radius: 12px; padding: 1.5rem;">
                        <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 1rem;">
                            <span style="font-weight: 600;">${category.name}</span>
                            <span style="color: #6b7280;">–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${category.recommended} –º–æ–Ω–µ—Ç</span>
                        </div>
                        <div style="display: flex; gap: 0.5rem; justify-content: center;">
                            ${[1, 2, 3, 4, 5].map(amount => `
                                <button onclick="allocateMoney(${index}, ${amount})" 
                                        style="background: #8b5cf6; color: white; border: none; width: 40px; height: 40px; border-radius: 8px; cursor: pointer;">
                                    ${amount}
                                </button>
                            `).join('')}
                        </div>
                        <div style="margin-top: 1rem;">
                            <span>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: </span>
                            <span id="spent-${index}" style="font-weight: 600;">${category.spent}</span>
                            <span> –º–æ–Ω–µ—Ç</span>
                        </div>
                    </div>
                `).join('')}
            </div>
            
            <div style="margin-bottom: 2rem;">
                <p>–û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: <span id="remaining-money" style="font-weight: 600;">${totalMoney}</span></p>
            </div>
            
            <button onclick="checkBudgetAllocation()" 
                    style="background: #8b5cf6; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer;">
                –ì–æ—Ç–æ–≤–æ
            </button>
        </div>
    `;
}

let budgetState = {
    remaining: 10,
    categories: [
        { name: 'üçé –ï–¥–∞', recommended: 5, spent: 0 },
        { name: 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', recommended: 2, spent: 0 },
        { name: 'üéÅ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', recommended: 3, spent: 0 }
    ]
};

function allocateMoney(categoryIndex, amount) {
    if (budgetState.remaining >= amount) {
        budgetState.categories[categoryIndex].spent += amount;
        budgetState.remaining -= amount;
        
        document.getElementById(`spent-${categoryIndex}`).textContent = budgetState.categories[categoryIndex].spent;
        document.getElementById('remaining-money').textContent = budgetState.remaining;
    }
}

function checkBudgetAllocation() {
    let score = 0;
    budgetState.categories.forEach(category => {
        if (Math.abs(category.spent - category.recommended) <= 1) {
            score += 3;
        }
    });
    
    if (score >= 6) {
        currentGameState.score += score;
        showGameResult('üí∞ –û—Ç–ª–∏—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!', '–¢—ã —Ö–æ—Ä–æ—à–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª –±—é–¥–∂–µ—Ç! –¢–∞–∫ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.');
    } else {
        showGameResult('üìä –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞!', '–ü–æ–ø—Ä–æ–±—É–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º.');
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    budgetState = {
        remaining: 10,
        categories: [
            { name: 'üçé –ï–¥–∞', recommended: 5, spent: 0 },
            { name: 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', recommended: 2, spent: 0 },
            { name: 'üéÅ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', recommended: 3, spent: 0 }
        ]
    };
}

// –ò–≥—Ä–∞ 9: –°–æ–∑–¥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function renderSafeCharacterGame() {
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 2rem;">–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä—ã</h3>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; max-width: 500px; margin: 0 auto;">
                <!-- –í—ã–±–æ—Ä –Ω–∏–∫–∞ -->
                <div style="text-align: left;">
                    <h4 style="color: #1f2937; margin-bottom: 1rem;">–í—ã–±–µ—Ä–∏ –∏–º—è:</h4>
                    <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                        <button onclick="selectName('super_cat')" style="background: white; border: 2px solid #e5e7eb; padding: 1rem; border-radius: 8px; cursor: pointer; text-align: left;">
                            üê± Super_Cat
                        </button>
                        <button onclick="selectName('masha_ivanova')" style="background: white; border: 2px solid #e5e7eb; padding: 1rem; border-radius: 8px; cursor: pointer; text-align: left;">
                            üëß –ú–∞—à–∞_–ò–≤–∞–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
                
                <!-- –í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∞ -->
                <div style="text-align: left;">
                    <h4 style="color: #1f2937; margin-bottom: 1rem;">–í—ã–±–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä:</h4>
                    <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                        <button onclick="selectAvatar('robot')" style="background: white; border: 2px solid #e5e7eb; padding: 1rem; border-radius: 8px; cursor: pointer; text-align: left;">
                            ü§ñ –†–æ–±–æ—Ç
                        </button>
                        <button onclick="selectAvatar('photo')" style="background: white; border: 2px solid #e5e7eb; padding: 1rem; border-radius: 8px; cursor: pointer; text-align: left;">
                            üì∏ –ú–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                        </button>
                    </div>
                </div>
            </div>
            
            <div id="character-preview" style="background: #f8fafc; border-radius: 16px; padding: 2rem; margin: 2rem auto; max-width: 300px;">
                <p style="color: #6b7280;">–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>
            </div>
            
            <button onclick="checkSafeCharacter()" 
                    style="background: #8b5cf6; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer;">
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </button>
        </div>
    `;
}

let characterChoices = { name: null, avatar: null };

function selectName(name) {
    characterChoices.name = name;
    updateCharacterPreview();
}

function selectAvatar(avatar) {
    characterChoices.avatar = avatar;
    updateCharacterPreview();
}

function updateCharacterPreview() {
    const preview = document.getElementById('character-preview');
    if (characterChoices.name && characterChoices.avatar) {
        const avatarEmoji = characterChoices.avatar === 'robot' ? 'ü§ñ' : 'üëß';
        const nameText = characterChoices.name === 'super_cat' ? 'Super_Cat' : '–ú–∞—à–∞_–ò–≤–∞–Ω–æ–≤–∞';
        
        preview.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">${avatarEmoji}</div>
                <h4 style="color: #1f2937;">${nameText}</h4>
            </div>
        `;
    }
}

function checkSafeCharacter() {
    if (characterChoices.name === 'super_cat' && characterChoices.avatar === 'robot') {
        currentGameState.score += 10;
        showGameResult('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂!', '–û—Ç–ª–∏—á–Ω–æ! –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–º—è –∏ —Ñ–æ—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.');
    } else {
        showGameResult('‚ùå –û–ø–∞—Å–Ω–æ!', '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞—Ö!');
    }
    characterChoices = { name: null, avatar: null };
}

// –ò–≥—Ä–∞ 10: –û–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
function renderChatSafetyGame() {
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 2rem;">–ù–∞–π–¥–∏ –æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ</h3>
            
            <div style="background: #1f2937; color: white; border-radius: 16px; padding: 2rem; max-width: 400px; margin: 0 auto 2rem;">
                <div style="text-align: left;">
                    <div style="background: #374151; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                        <strong>Super_Cat:</strong> –ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ö–æ—á–µ—Ç –≤–º–µ—Å—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å?
                    </div>
                    <div style="background: #374151; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                        <strong>Game_Lover:</strong> –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∏.
                    </div>
                    <div id="dangerous-message" style="background: #ef4444; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; cursor: pointer;" onclick="catchDangerousMessage()">
                        <strong>Stranger123:</strong> –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –≤ –ø–∞—Ä–∫–µ? –Ø –≤ –∫—Ä–∞—Å–Ω–æ–π –∫—É—Ä—Ç–∫–µ.
                    </div>
                    <div style="background: #374151; padding: 1rem; border-radius: 8px;">
                        <strong>Happy_Player:</strong> –Ø –ø—Ä–æ—à–µ–ª 5 —É—Ä–æ–≤–µ–Ω—å! üéâ
                    </div>
                </div>
            </div>
            
            <p style="color: #6b7280;">–ù–∞–∂–º–∏ –Ω–∞ –æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</p>
        </div>
    `;
}

function catchDangerousMessage() {
    currentGameState.score += 10;
    document.getElementById('dangerous-message').style.background = '#10b981';
    document.getElementById('dangerous-message').innerHTML = '<strong>Stranger123:</strong> ‚ùå –°–û–û–ë–©–ï–ù–ò–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û';
    document.getElementById('dangerous-message').style.cursor = 'default';
    
    setTimeout(() => {
        showGameResult('‚úÖ –ú–æ–ª–æ–¥–µ—Ü!', '–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–≥–ª–∞—à–∞–π—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.');
    }, 1000);
}

// –ò–≥—Ä–∞ 11: –£–≥–∞–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
function renderProfessionsGame() {
    const professions = [
        { name: 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á', tool: 'üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞' },
        { name: 'üë®‚Äçüöí –ü–æ–∂–∞—Ä–Ω—ã–π', tool: 'üöí –ü–æ–∂–∞—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞' },
        { name: 'üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å', tool: 'üìö –ö–Ω–∏–≥–∏' },
        { name: 'üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä', tool: 'üöú –¢—Ä–∞–∫—Ç–æ—Ä' }
    ].sort(() => Math.random() - 0.5);
    
    const tools = professions.map(p => p.tool).sort(() => Math.random() - 0.5);
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 2rem;">–°–æ–µ–¥–∏–Ω–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º</h3>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; max-width: 500px; margin: 0 auto 2rem;">
                <div>
                    <h4 style="color: #1f2937; margin-bottom: 1rem;">–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏:</h4>
                    ${professions.map(prof => `
                        <div style="background: white; border: 2px solid #e5e7eb; padding: 1rem; margin: 0.5rem 0; border-radius: 8px;">
                            ${prof.name}
                        </div>
                    `).join('')}
                </div>
                
                <div>
                    <h4 style="color: #1f2937; margin-bottom: 1rem;">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h4>
                    ${tools.map(tool => `
                        <div style="background: white; border: 2px solid #e5e7eb; padding: 1rem; margin: 0.5rem 0; border-radius: 8px; cursor: pointer;" 
                             onclick="matchProfession('${tool}')">
                            ${tool}
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div id="matching-result" style="min-height: 60px;"></div>
        </div>
    `;
}

let matchedPairs = 0;
const totalPairs = 4;

function matchProfession(tool) {
    // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª—é–±–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    matchedPairs++;
    document.getElementById('matching-result').innerHTML = `
        <div style="background: #d1fae5; color: #065f46; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
            ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${tool} - –≤–∞–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã.
        </div>
    `;
    
    if (matchedPairs >= totalPairs) {
        setTimeout(() => {
            currentGameState.score += 8;
            showGameResult('üéâ –û—Ç–ª–∏—á–Ω–æ!', '–¢—ã –∑–Ω–∞–µ—à—å –º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π! –õ—é–¥–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–µ–Ω—å–≥–∏ —Å–≤–æ–∏–º —Ç—Ä—É–¥–æ–º.');
        }, 1000);
    }
}

// –ò–≥—Ä–∞ 12: –ú–∞–≥–∞–∑–∏–Ω
function renderShopGame() {
    const products = [
        { name: 'üçé –Ø–±–ª–æ–∫–æ', price: 1 },
        { name: 'üçû –•–ª–µ–±', price: 2 },
        { name: 'ü•õ –ú–æ–ª–æ–∫–æ', price: 3 }
    ];
    
    const playerMoney = 5;
    
    return `
        <div style="text-align: center;">
            <h3 style="color: #1f2937; margin-bottom: 1rem;">–£ —Ç–µ–±—è –µ—Å—Ç—å ${playerMoney} –º–æ–Ω–µ—Ç</h3>
            <p style="color: #6b7280; margin-bottom: 2rem;">–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å</p>
            
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-bottom: 2rem;">
                ${products.map(product => `
                    <div style="background: white; border: 2px solid #e5e7eb; border-radius: 12px; padding: 1.5rem; cursor: pointer;" 
                         onclick="buyProduct('${product.name}', ${product.price}, ${playerMoney})">
                        <div style="font-size: 2rem; margin-bottom: 0.5rem;">${product.name}</div>
                        <div style="color: #8b5cf6; font-weight: 600;">${product.price} –º–æ–Ω–µ—Ç–∞</div>
                    </div>
                `).join('')}
            </div>
            
            <div id="shop-result"></div>
        </div>
    `;
}

function buyProduct(productName, price, playerMoney) {
    const resultDiv = document.getElementById('shop-result');
    
    if (price <= playerMoney) {
        const change = playerMoney - price;
        currentGameState.score += 5;
        
        resultDiv.innerHTML = `
            <div style="background: #d1fae5; color: #065f46; padding: 1.5rem; border-radius: 12px;">
                <h4>‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!</h4>
                <p>–¢—ã –∫—É–ø–∏–ª ${productName} –∑–∞ ${price} –º–æ–Ω–µ—Ç</p>
                <p>–°–¥–∞—á–∞: ${change} –º–æ–Ω–µ—Ç</p>
            </div>
        `;
        
        setTimeout(() => {
            showGameResult('üõí –û—Ç–ª–∏—á–Ω–æ!', '–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–ª –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–ª—É—á–∏–ª —Å–¥–∞—á—É! –¢–∞–∫ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.');
        }, 2000);
    } else {
        resultDiv.innerHTML = `
            <div style="background: #fef2f2; color: #dc2626; padding: 1.5rem; border-radius: 12px;">
                <h4>‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥</h4>
                <p>–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${price - playerMoney} –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${productName}</p>
            </div>
        `;
    }
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
function showGameResult(title, message) {
    const modal = document.getElementById('gameModal');
    const content = document.getElementById('modalContent');
    
    content.innerHTML = `
        <div class="game-content" style="text-align: center;">
            <div style="font-size: 4rem; margin-bottom: 1rem;">${title.includes('‚úÖ') || title.includes('üéâ') ? 'üéâ' : 'ü§î'}</div>
            <h2 style="color: #1f2937; margin-bottom: 1rem;">${title}</h2>
            <p style="color: #6b7280; font-size: 1.125rem; margin-bottom: 2rem;">${message}</p>
            
            <div style="background: #f8fafc; border-radius: 12px; padding: 1.5rem; margin-bottom: 2rem;">
                <h4 style="color: #1f2937; margin-bottom: 0.5rem;">–¢–≤–æ–∏ –æ—á–∫–∏: ${currentGameState.score}</h4>
                <p style="color: #6b7280;">–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!</p>
            </div>
            
            <div style="display: flex; gap: 1rem; justify-content: center;">
                <button onclick="openGameModal('${currentGameState.topic}')" 
                        style="background: #6b7280; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer;">
                    –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É
                </button>
                <button onclick="startTest('${currentGameState.topic}')" 
                        style="background: #8b5cf6; color: white; border: none; padding: 1rem 2rem; border-radius: 12px; cursor: pointer;">
                    –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
                </button>
            </div>
        </div>
    `;
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (startTest, closeGameModal –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

function startTest(topic) {
    const modal = document.getElementById('gameModal');
    const content = document.getElementById('modalContent');
    const topicData = gameData[topic];
    let selectedAnswer = null;
    
    function updateTest() {
        content.innerHTML = `
            <div class="game-content">
                <h2>–ü—Ä–æ–≤–µ—Ä—å –∑–Ω–∞–Ω–∏—è!</h2>
                <p style="font-size: 1.125rem; margin-bottom: 2rem; color: #374151;">${topicData.test.question}</p>
                
                <div style="display: flex; flex-direction: column; gap: 1rem; margin-bottom: 2rem;">
                    ${topicData.test.options.map((option, index) => `
                        <button onclick="selectAnswer(${index})" 
                                style="text-align: left; padding: 1.5rem; border: 2px solid ${selectedAnswer === index ? (option.correct ? '#10b981' : '#ef4444') : '#e5e7eb'}; 
                                       background: ${selectedAnswer === index ? (option.correct ? '#d1fae5' : '#fef2f2') : 'white'}; 
                                       border-radius: 12px; cursor: pointer; transition: all 0.3s;">
                            ${option.text}
                        </button>
                    `).join('')}
                </div>
                
                ${selectedAnswer !== null ? `
                    <div style="background: ${topicData.test.options[selectedAnswer].correct ? '#d1fae5' : '#fef2f2'}; 
                                border: 2px solid ${topicData.test.options[selectedAnswer].correct ? '#10b981' : '#ef4444'}; 
                                border-radius: 12px; padding: 1.5rem; margin: 1rem 0;">
                        <h4 style="color: ${topicData.test.options[selectedAnswer].correct ? '#065f46' : '#991b1b'}; margin-bottom: 0.5rem;">
                            ${topicData.test.options[selectedAnswer].correct ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!'}
                        </h4>
                        <p style="color: ${topicData.test.options[selectedAnswer].correct ? '#065f46' : '#991b1b'};">
                            ${topicData.test.options[selectedAnswer].correct ? 
                                '–¢—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–Ω—è–ª —Ç–µ–º—É!' : 
                                '–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –µ—â–µ... –ü–æ–º–Ω–∏: ' + topicData.test.options.find(opt => opt.correct)?.text}
                        </p>
                    </div>
                    
                    <button onclick="closeGameModal()" 
                            style="width: 100%; background: #8b5cf6; color: white; border: none; padding: 1rem; border-radius: 12px; cursor: pointer; font-weight: 600; margin-top: 1rem;">
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                ` : ''}
            </div>
        `;
    }
    
    window.selectAnswer = (index) => {
        selectedAnswer = index;
        updateTest();
    };
    
    updateTest();
}

function closeGameModal() {
    const modal = document.getElementById('gameModal');
    modal.style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('gameModal');
    if (event.target === modal) {
        closeGameModal();
    }
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.game-card, .advice-card');
    cards.forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(card);
    });
});
